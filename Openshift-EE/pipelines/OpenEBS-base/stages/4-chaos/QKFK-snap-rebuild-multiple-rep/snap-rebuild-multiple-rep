#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID
###clone e2e-openshift-repo
echo "cloning e2e-openshift repo*************"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'git clone -b OpenEBS-base https://github.com/openebs/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/4-chaos/QKFK-snap-rebuild-multiple-rep/snap-rebuild-multiple-rep node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
case_id=QKFK

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:snap-rebuild-multiple-rep jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:snap-rebuild-multiple-rep jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

echo "*******Deploying Busybox Application****"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-snap-multiple-rep metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."

cp apps/busybox/deployers/run_litmus_test.yml busybox_snap_multiple_rep.yml

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-snap-multiple-rep/g' \
-e 's/app=busybox-sts/app=snap-multiple-rep/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: openebs-busybox/value: openebs-bb-snap-multiple-rep/g' \
-e 's/value: app-busybox-ns/value: snap-multiple-rep/g' busybox_snap_multiple_rep.yml
cat busybox_snap_multiple_rep.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:deploy-busybox-snap-multiple-rep' job=busybox_snap_multiple_rep.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snap-rebuild-multiple-rep $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=snap-rebuild-multiple-rep metadata="")
echo $test_name

cd litmus
cp apps/percona/functional/snapshot_rebuild/snap_rebuild_multiple_rep/run_litmus_test.yml run_snap_multiple_rep.yml

sed -i -e 's/value: percona-mysql-claim/value: openebs-bb-snap-multiple-rep/g' \
-e 's/value: '\''name=percona'\''/value: '\''app=snap-multiple-rep'\''/g' \
-e 's/value: percona-cstor/value: snap-multiple-rep/g' run_snap_multiple_rep.yml

echo "Running the litmus test for Busybox Deployment snapshot rebuild.."
cat run_snap_multiple_rep.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:k8s-snap-multiple-rep-rebuild' job=run_snap_multiple_rep.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snap-rebuild-multiple-rep $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-snap-multiple-rep metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_snap_multiple_rep.yml

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-snap-multiple-rep/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-snap-multiple-rep/g' \
-e 's/app=busybox-sts/app=snap-multiple-rep/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: openebs-busybox/value: openebs-bb-snap-multiple-rep/g' \
-e 's/value: app-busybox-ns/value: snap-multiple-rep/g' \
-e 's/value: provision/value: deprovision/g' deprovision_snap_multiple_rep.yml

echo "Running the litmus test for Busybox Deployment.."
cat deprovision_snap_multiple_rep.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-snap-multiple-rep' job=deprovision_snap_multiple_rep.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snap-rebuild-multiple-rep $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
test_case_id="QKFK-$pipeline_id"

gittoken=$(echo "$github_token")
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
python3 Openshift-EE/utils/result/result_update.py $test_case_id QKFK 4-chaos "Check if the snapshot cannot be rebuilt when the quorum condition is not met" $testResult $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:snap-rebuild-multiple-rep jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass
}

if [ "$1" == "node" ];then
  node $2 $3
else
  pod
fi
